{"ast":null,"code":"'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\n\n\nInterceptorManager.prototype.use = function (fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\n\n\nInterceptorManager.prototype.eject = function (id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `remove`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\n\n\nInterceptorManager.prototype.forEach = function (fn) {\n  utils.forEach(this.handlers, function (h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;","map":{"version":3,"names":["utils","require","InterceptorManager","handlers","prototype","use","fulfilled","rejected","push","length","eject","id","forEach","fn","h","module","exports"],"sources":["C:/Users/jatin/OneDrive/Desktop/New folder (18)/SimpleYoutubeClone_ReactJS/youtube-clone-reactjs/node_modules/axios/lib/core/InterceptorManager.js"],"sourcesContent":["'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function (fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function (id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `remove`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function (fn) {\n  utils.forEach(this.handlers, function (h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AAEA,SAASC,kBAAT,GAA8B;EAC5B,KAAKC,QAAL,GAAgB,EAAhB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAD,kBAAkB,CAACE,SAAnB,CAA6BC,GAA7B,GAAmC,UAAUC,SAAV,EAAqBC,QAArB,EAA+B;EAChE,KAAKJ,QAAL,CAAcK,IAAd,CAAmB;IACjBF,SAAS,EAAEA,SADM;IAEjBC,QAAQ,EAAEA;EAFO,CAAnB;EAIA,OAAO,KAAKJ,QAAL,CAAcM,MAAd,GAAuB,CAA9B;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;;;AACAP,kBAAkB,CAACE,SAAnB,CAA6BM,KAA7B,GAAqC,UAAUC,EAAV,EAAc;EACjD,IAAI,KAAKR,QAAL,CAAcQ,EAAd,CAAJ,EAAuB;IACrB,KAAKR,QAAL,CAAcQ,EAAd,IAAoB,IAApB;EACD;AACF,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAT,kBAAkB,CAACE,SAAnB,CAA6BQ,OAA7B,GAAuC,UAAUC,EAAV,EAAc;EACnDb,KAAK,CAACY,OAAN,CAAc,KAAKT,QAAnB,EAA6B,UAAUW,CAAV,EAAa;IACxC,IAAIA,CAAC,KAAK,IAAV,EAAgB;MACdD,EAAE,CAACC,CAAD,CAAF;IACD;EACF,CAJD;AAKD,CAND;;AAQAC,MAAM,CAACC,OAAP,GAAiBd,kBAAjB"},"metadata":{},"sourceType":"script"}